openapi: 3.0.0
info:
  title: Kevin API
  version: '1.0'
  license:
    url: 'https://github.com/Trinitrotoluenisti/kevin/blob/master/LICENSE'
    name: Mozilla Public License 2.0
servers:
  - url: 'http://localhost:8080'
paths:
  /register:
    post:
      summary: Register
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - accessToken
                  - refreshToken
              examples:
                Done:
                  value:
                    accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTI1NTk1NTEsIm5iZiI6MTU5MjU1OTU1MSwianRpIjoiZTc1MTJiZTMtNWM2OC00OGRmLTkxZTktOWMwOGViNGUxM2I1IiwiZXhwIjoxNTkyNTYyMjUxLCJpZGVudGl0eSI6ImdpYW5sdXBhcnJpMDMiLCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.ir-LoRDfpFnoHBoKeV_efxp_QqCbw5NK1bA2gC-zn_E
                    refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTI1NTk1NTEsIm5iZiI6MTU5MjU1OTU1MSwianRpIjoiNjc1NGQwOWUtZTlkZS00ODI2LTk1ODItZWYzMDkxNTNhNDRiIiwiaWRlbnRpdHkiOiJnaWFubHVwYXJyaTAzIiwidHlwZSI6InJlZnJlc2gifQ.QGgw1B-CoGALXMezu3UHu4wmRMSIyc4IfbFMb3oBHpo
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Missing Name:
                  value:
                    error: Missing name
                    description: "Missing name field in request's body"
                    id: 270
                    status: 400
                Username too short:
                  value:
                    error: username too short
                    description: username must be at least 5 characters long
                    id: 241
                    status: 400
                Invalid Email:
                  value:
                    error: email is not an email
                    description: email field must contain a valid email
                    id: 261
                    status: 400
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Already Used Data:
                  value:
                    error: user already exists
                    description: "Some user's data have already been used"
      operationId: post-register
      description: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                surname:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - name
                - surname
                - password
            examples: {}
  /login:
    post:
      summary: Login
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                required:
                  - accessToken
                  - refreshToken
              examples:
                Logged In:
                  value:
                    accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTI1NTk1NTEsIm5iZiI6MTU5MjU1OTU1MSwianRpIjoiZTc1MTJiZTMtNWM2OC00OGRmLTkxZTktOWMwOGViNGUxM2I1IiwiZXhwIjoxNTkyNTYyMjUxLCJpZGVudGl0eSI6ImdpYW5sdXBhcnJpMDMiLCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.ir-LoRDfpFnoHBoKeV_efxp_QqCbw5NK1bA2gC-zn_E
                    refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTI1NTk1NTEsIm5iZiI6MTU5MjU1OTU1MSwianRpIjoiNjc1NGQwOWUtZTlkZS00ODI2LTk1ODItZWYzMDkxNTNhNDRiIiwiaWRlbnRpdHkiOiJnaWFubHVwYXJyaTAzIiwidHlwZSI6InJlZnJlc2gifQ.QGgw1B-CoGALXMezu3UHu4wmRMSIyc4IfbFMb3oBHpo
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Missing Username:
                  value:
                    error: Missing username
                    description: "Missing username field in request's body"
                    id: 240
                    status: 400
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Wrong username or password:
                  value:
                    error: Wrong username or password
                    description: The username and/or password are wrong
                    id: 220
                    status: 401
      operationId: post-login
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
  '/users/{username}':
    parameters:
      - schema:
          type: string
        name: username
        in: path
        required: true
    get:
      summary: UsersView
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  name:
                    type: string
                  surname:
                    type: string
                  perms:
                    type: integer
                  id:
                    type: integer
                  bio:
                    type: string
                  isEmailPublic:
                    type: boolean
                  email:
                    type: string
                required:
                  - username
                  - name
                  - surname
                  - perms
                  - id
                  - bio
                  - isEmailPublic
              examples:
                Private Email:
                  value:
                    username: elonmusk
                    name: Elon
                    surname: Musk
                    perms: 0
                    id: 1
                    bio: ''
                    isEmailPublic: false
                Public Email:
                  value:
                    username: elonmusk
                    name: Elon
                    surname: Musk
                    email: elon@tesla.com
                    perms: 0
                    id: 1
                    bio: ''
                    isEmailPublic: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Found:
                  value:
                    error: User does not exist
                    description: "Couldn't find an user with that username"
                    id: 200
                    status: 404
      operationId: get-users-username
      description: Get public infos of an user
  /token:
    put:
      summary: TokenRefresh
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
              examples:
                Generated:
                  value:
                    accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1OTI1NTk1NTEsIm5iZiI6MTU5MjU1OTU1MSwianRpIjoiZTc1MTJiZTMtNWM2OC00OGRmLTkxZTktOWMwOGViNGUxM2I1IiwiZXhwIjoxNTkyNTYyMjUxLCJpZGVudGl0eSI6ImdpYW5sdXBhcnJpMDMiLCJmcmVzaCI6ZmFsc2UsInR5cGUiOiJhY2Nlc3MifQ.ir-LoRDfpFnoHBoKeV_efxp_QqCbw5NK1bA2gC-zn_E
      operationId: put-token
      description: Generate a new access token with the refresh token
      security:
        - Refresh Token: []
  /token/access:
    delete:
      summary: TokenRevokeAccess
      tags: []
      responses:
        '204':
          description: No Content
      operationId: delete-token-access
      description: Revoke the access token
      security:
        - Access Token: []
  /token/refresh:
    delete:
      summary: TokenRevokeRefresh
      tags: []
      responses:
        '204':
          description: No Content
      operationId: delete-token-refresh
      description: Revoke the refresh token
      security:
        - Refresh Token: []
  /user:
    get:
      summary: UserView
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  name:
                    type: string
                  surname:
                    type: string
                  perms:
                    type: integer
                  id:
                    type: integer
                  bio:
                    type: string
                  isEmailPublic:
                    type: boolean
                  email:
                    type: string
                required:
                  - username
                  - name
                  - surname
                  - perms
                  - id
                  - bio
                  - isEmailPublic
                  - email
              examples:
                User:
                  username: elonmusk
                  name: Elon
                  surname: Musk
                  email: elon@tesla.com
                  perms: 0
                  id: 1
                  bio: ''
                  isEmailPublic: false
                  value:
                    username: elonmusk
                    name: Elon
                    surname: Musk
                    email: elon@tesla.com
                    perms: 0
                    id: 1
                    bio: ''
                    isEmailPublic: true
      operationId: get-user
      description: "View all the infos about the user you're logged in"
      security:
        - Access Token: []
    delete:
      summary: UserDelete
      operationId: delete-user
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    error: Missing Authorization Header
                    description: The resource you were looking for needs a token to work
                    id: 120
                    status: 401
      description: Delete the user
      security:
        - Access Token: []
  '/user/{field}':
    parameters:
      - schema:
          type: string
        name: field
        in: path
        required: true
    put:
      summary: UserEdit
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Ok:
                  value:
                    username: hpotter
                    name: Harry
                    surname: Potter
                    email: harrypotter@hedwig.uk
                    perms: 0
                    id: 1
                    bio: |-
                      Hey!
                      This is Harry Potter!
                    isEmailPublic: false
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Unauthorized:
                  value:
                    error: Missing Authorization Header
                    description: The resource you were looking for needs a token to work
                    id: 120
                    status: 401
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Resource not found:
                  value:
                    error: Resource not found
                    description: "The resource you were looking for hasn't been found"
                    id: 100
                    status: 404
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Conflict Username:
                  value:
                    error: User already exist
                    description: "Some user's data has already been used"
                    id: 230
                    status: 409
      operationId: put-user-field
      description: |-
        Edit a field of the user.
        The available fields are username, password, email, name, surname, bio, isEmailPublic
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
              required:
                - value
  /communities:
    get:
      summary: ListCommunities
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  communities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Community'
              examples:
                Not Logged In:
                  value:
                    communities:
                      - name: Science
                        id: 1
                Logged In:
                  value:
                    communities:
                      - name: Science
                        id: 1
                        following: true
      operationId: get-communities
      description: 'Get the list of communities. If an authentication is provided, it returns the community with a following field.'
      security:
        - Access Token: []
    post:
      summary: CreateCommunity
      operationId: post-communities
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                ScienceThings:
                  value:
                    name: ScienceThings
                    id: 1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Name too short:
                  value:
                    error: name too short
                    description: name must be at least 5 characters long
                    id: 331
                    status: 400
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Missing perms:
                  value:
                    error: "Can't create community"
                    description: You have to be logged in as an admin to do that
                    id: 310
                    status: 403
      description: |-
        Create  a new community.
        NB: only admins (perms >= 2) can create a new community.
      security:
        - Access Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
  '/communities/{name}':
    parameters:
      - schema:
          type: string
        name: name
        in: path
        required: true
    get:
      summary: ViewCommunity
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
              examples:
                Not Logged:
                  value:
                    name: ScienceThings
                    id: 1
                Logged:
                  value:
                    name: Science
                    id: 1
                    following: true
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                Not Found:
                  value:
                    error: Community does not exist
                    description: "Couldn't find a community with that name"
                    id: 300
                    status: 404
      operationId: get-communities-name
      description: 'Return that community. If an authentication is provided, it returns it with a following field.'
      security:
        - Access Token: []
components:
  schemas:
    User:
      title: User
      type: object
      description: An User
      x-examples:
        Elon Musk:
          username: elonmusk
          name: Elon
          surname: Musk
          email: elon@tesla.com
          perms: 0
          id: 1
          bio: ''
          isEmailPublic: false
      properties:
        id:
          type: number
        perms:
          type: number
        username:
          type: string
        password:
          type: string
        email:
          type: string
        public_email:
          type: boolean
        name:
          type: string
        surname:
          type: string
        bio:
          type: string
        written_posts:
          type: string
        approved_posts:
          type: string
      required:
        - id
        - perms
        - username
        - password
        - email
        - public_email
        - name
        - surname
    Error:
      title: Error
      type: object
      description: |-
        An error raised by the APIs.

        The complete list of errors can be found at https://github.com/Trinitrotoluenisti/kevin/blob/master/api/errors.json
      x-examples:
        Method not allowed:
          error: Method not allowed
          description: "The resource you were looking for doesn't allow that method"
          id: 110
          status: 405
        Not Found:
          error: Resource not found
          description: "The resource you were looking for hasn't been found"
          id: 100
          status: 404
        Internal Server Error:
          error: Internal server error
          description: "The server encountered an error during the processing of the request. We're sorry."
          id: 190
          status: 500
        Expired token:
          error: Expired token
          description: The token has expired
          id: 131
          status: 422
      properties:
        error:
          type: string
        description:
          type: string
        status:
          type: integer
          description: |
            The HTTP status code associated
        code:
          type: integer
          description: An unique id for the error
      required:
        - error
        - description
        - status
        - code
    Community:
      title: Community
      type: object
      description: A place where to save posts
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
  securitySchemes:
    Access Token:
      type: http
      scheme: bearer
    Refresh Token:
      type: http
      scheme: bearer
